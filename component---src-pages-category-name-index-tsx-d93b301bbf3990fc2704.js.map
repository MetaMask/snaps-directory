{"version":3,"file":"component---src-pages-category-name-index-tsx-d93b301bbf3990fc2704.js","mappings":"+PA4BA,MA0BaA,EAAqCC,IAAc,IAAb,KAAEC,GAAMD,EACzD,MAAME,GAAOC,EAAAA,EAAAA,MAEPC,EAAWH,EAAKG,SAASC,MACzB,KAAEA,EAAI,YAAEC,GAAgBC,EAAAA,GAAqBH,GAC7CI,EAAQ,GAAGP,EAAKQ,KAAKC,aAAaC,QAAUV,EAAKG,SAASQ,OAAOC,UAEjEC,EAAWZ,EAAKa,EAAEV,GAClBW,EAAkBd,EAAKa,EAAET,GACzBW,EAAKf,EAAAa,EAAG,CAAAG,GAAA,SAAAC,OAAA,CAAAL,SAAIA,KAElB,OACEM,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,QAAMC,KAAK,QACXD,EAAAA,EAAAA,KAAA,SAAAD,SAAQL,KACRM,EAAAA,EAAAA,KAAA,QAAMlB,KAAK,cAAcoB,QAAST,KAClCO,EAAAA,EAAAA,KAAA,QAAMG,SAAS,WAAWD,QAASX,KACnCS,EAAAA,EAAAA,KAAA,QAAMG,SAAS,eAAeD,QAASxB,EAAKQ,KAAKC,aAAaO,SAC9DM,EAAAA,EAAAA,KAAA,QAAMG,SAAS,iBAAiBD,QAAST,KACzCO,EAAAA,EAAAA,KAAA,QAAMG,SAAS,UAAUD,QAAQ,aACjCF,EAAAA,EAAAA,KAAA,QAAMlB,KAAK,WAAWoB,QAASjB,KAC/Be,EAAAA,EAAAA,KAAA,QAAMlB,KAAK,iBAAiBoB,QAAQ,UACpCF,EAAAA,EAAAA,KAAA,QAAMlB,KAAK,kBAAkBoB,QAAQ,SACrCF,EAAAA,EAAAA,KAAA,QAAMlB,KAAK,eAAeoB,QAAQ,yBAClCF,EAAAA,EAAAA,KAAA,QAAMlB,KAAK,kBAAkBoB,QAASxB,EAAKQ,KAAKC,aAAaiB,UAC7DJ,EAAAA,EAAAA,KAAA,QAAMlB,KAAK,gBAAgBoB,QAASX,KACpCS,EAAAA,EAAAA,KAAA,QAAMlB,KAAK,sBAAsBoB,QAAST,KAC1CO,EAAAA,EAAAA,KAAA,QAAMlB,KAAK,gBAAgBoB,QAASjB,MACnC,EAwBP,UA9EmDoB,IAAc,IAAb,KAAE3B,GAAM2B,EAC1D,MAAMC,GAAWC,EAAAA,EAAAA,MAWjB,OATAC,EAAAA,EAAAA,YAAU,KACRF,GAASG,EAAAA,EAAAA,IAAY/B,EAAKG,SAASC,QAKnC4B,EAAAA,EAAAA,UAAS,WAAY,CAAEC,SAAS,GAAO,GACtC,CAACjC,EAAKG,SAASC,KAAMwB,IAEjB,IAAI,C","sources":["webpack://@metamask/snaps-directory/./src/pages/{Category.name}/index.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport { useLingui } from '@lingui/react';\nimport { graphql, navigate } from 'gatsby';\nimport type { FunctionComponent } from 'react';\nimport { useEffect } from 'react';\n\nimport type { RegistrySnapCategory } from '../../constants';\nimport { SNAP_CATEGORY_LABELS } from '../../constants';\nimport { setCategory } from '../../features';\nimport { useDispatch } from '../../hooks';\nimport type { Fields } from '../../utils';\n\nexport type CategoryProps = {\n  data: {\n    category: Fields<Queries.Category, 'name' | 'banner'>;\n  };\n};\n\n/**\n * This page is used to redirect to the main page, while setting the category\n * filter to the current category.\n *\n * This page is reachable at `/{category}`.\n *\n * @param props - The component props.\n * @param props.data - The page data.\n * @returns The rendered component.\n */\nconst Category: FunctionComponent<CategoryProps> = ({ data }) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(setCategory(data.category.name as RegistrySnapCategory));\n\n    // According to the type definition, `navigate` returns a promise, but in\n    // practice it does not.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    navigate('/explore', { replace: true });\n  }, [data.category.name, dispatch]);\n\n  return null;\n};\n\ntype HeadProps = CategoryProps & {\n  data: {\n    site: {\n      siteMetadata: Fields<\n        Queries.SiteSiteMetadata,\n        'title' | 'description' | 'author' | 'siteUrl'\n      >;\n    };\n  };\n};\n\nexport const Head: FunctionComponent<HeadProps> = ({ data }) => {\n  const i18n = useLingui();\n\n  const category = data.category.name as RegistrySnapCategory;\n  const { name, description } = SNAP_CATEGORY_LABELS[category];\n  const image = `${data.site.siteMetadata.siteUrl}${data.category.banner.publicURL}`;\n\n  const nameText = i18n._(name);\n  const descriptionText = i18n._(description);\n  const title = t`${nameText} Snaps on the MetaMask Snaps Directory`;\n\n  return (\n    <>\n      <html lang=\"en\" />\n      <title>{title}</title>\n      <meta name=\"description\" content={descriptionText} />\n      <meta property=\"og:title\" content={nameText} />\n      <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n      <meta property=\"og:description\" content={descriptionText} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"og:image\" content={image} />\n      <meta name=\"og:image:width\" content=\"1200\" />\n      <meta name=\"og:image:height\" content=\"630\" />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={data.site.siteMetadata.author} />\n      <meta name=\"twitter:title\" content={nameText} />\n      <meta name=\"twitter:description\" content={descriptionText} />\n      <meta name=\"twitter:image\" content={image} />\n    </>\n  );\n};\n\nexport const query = graphql`\n  query ($id: String) {\n    category(id: { eq: $id }) {\n      name\n      banner {\n        publicURL\n      }\n    }\n\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        siteUrl\n      }\n    }\n  }\n`;\n\nexport default Category;\n"],"names":["Head","_ref2","data","i18n","useLingui","category","name","description","SNAP_CATEGORY_LABELS","image","site","siteMetadata","siteUrl","banner","publicURL","nameText","_","descriptionText","title","id","values","_jsxs","_Fragment","children","_jsx","lang","content","property","author","_ref","dispatch","useDispatch","useEffect","setCategory","navigate","replace"],"sourceRoot":""}