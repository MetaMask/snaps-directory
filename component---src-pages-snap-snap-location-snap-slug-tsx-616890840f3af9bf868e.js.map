{"version":3,"file":"component---src-pages-snap-snap-location-snap-slug-tsx-616890840f3af9bf868e.js","mappings":"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","sources":["webpack://@metamask/snaps-directory/./src/pages/snap/{Snap.location}/{Snap.slug}.tsx","webpack://@metamask/snaps-directory/./node_modules/@chakra-ui/layout/dist/chunk-W7WUSNWJ.mjs"],"sourcesContent":["import { Box, Container, Divider, Flex, Text } from '@chakra-ui/react';\nimport { Trans } from '@lingui/macro';\nimport { graphql } from 'gatsby';\nimport type { FunctionComponent } from 'react';\n\nimport { InstallSnapButton, SnapWebsiteButton } from '../../../components';\nimport { type RegistrySnapCategory } from '../../../constants';\nimport {\n  Description,\n  useGetInstalledSnapsQuery,\n  Authorship,\n  RelatedSnaps,\n  Metadata,\n} from '../../../features';\nimport { NotificationAcknowledger } from '../../../features/notifications/components';\nimport type { Fields } from '../../../utils';\n\ntype SnapPageProps = {\n  data: {\n    snap: Fields<\n      Queries.Snap,\n      | 'name'\n      | 'icon'\n      | 'snapId'\n      | 'description'\n      | 'latestVersion'\n      | 'website'\n      | 'onboard'\n      | 'category'\n      | 'author'\n      | 'sourceCode'\n      | 'audits'\n      | 'banner'\n      | 'support'\n    >;\n  };\n};\n\nconst SnapPage: FunctionComponent<SnapPageProps> = ({ data }) => {\n  const {\n    name,\n    snapId,\n    icon,\n    website,\n    onboard,\n    description,\n    latestVersion,\n    category,\n  } = data.snap;\n\n  const { data: installedSnaps } = useGetInstalledSnapsQuery();\n  const isInstalled = Boolean(installedSnaps?.[snapId]);\n\n  return (\n    <Box position=\"relative\">\n      <Box\n        pointerEvents=\"none\"\n        position=\"absolute\"\n        top=\"-50%\"\n        width=\"100%\"\n        height=\"75%\"\n        sx={{\n          background: `url(\"${icon}\") no-repeat center center`,\n          backgroundSize: 'cover',\n          filter: 'blur(96px) saturate(1.2)',\n          opacity: '0.25',\n        }}\n      />\n      <Container maxWidth=\"container.xl\" paddingTop=\"0\" marginTop=\"20\">\n        <NotificationAcknowledger snapId={snapId} version={latestVersion} />\n        <Flex\n          flexDirection={['column', null, 'row']}\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          gap=\"6\"\n        >\n          <Authorship name={name} icon={icon} snapId={snapId} />\n          <Flex alignItems=\"center\" gap=\"4\" width={['100%', null, 'auto']}>\n            {!onboard && (\n              <InstallSnapButton\n                snapId={snapId}\n                name={name}\n                icon={icon}\n                website={website}\n                version={latestVersion}\n              />\n            )}\n            {(isInstalled || onboard) && website && (\n              <SnapWebsiteButton snapId={snapId} website={website} />\n            )}\n          </Flex>\n        </Flex>\n\n        <Divider marginY=\"6\" />\n        <Metadata snap={data.snap} />\n\n        <Text\n          color=\"text.alternative\"\n          textTransform=\"uppercase\"\n          fontWeight=\"medium\"\n          fontSize=\"sm\"\n        >\n          <Trans>\n            Description by{' '}\n            <Text\n              as=\"span\"\n              color=\"text.default\"\n              textTransform=\"uppercase\"\n              fontWeight=\"medium\"\n              fontSize=\"sm\"\n            >\n              {name}\n            </Text>\n          </Trans>\n        </Text>\n        <Description\n          description={description}\n          marginTop=\"2\"\n          whiteSpace=\"pre-wrap\"\n        />\n\n        {category && (\n          <>\n            <Divider my=\"12\" />\n            <RelatedSnaps\n              snapId={snapId}\n              category={category as RegistrySnapCategory}\n            />\n          </>\n        )}\n      </Container>\n    </Box>\n  );\n};\n\ntype HeadProps = SnapPageProps & {\n  data: {\n    site: {\n      siteMetadata: Fields<\n        Queries.SiteSiteMetadata,\n        'title' | 'description' | 'author' | 'siteUrl'\n      >;\n    };\n  };\n};\n\nexport const Head: FunctionComponent<HeadProps> = ({ data }) => {\n  const title = `${data.snap.name} on the MetaMask Snaps Directory`;\n  const description = `Customize your web3 experience with ${data.snap.name}.`;\n  const image = `${data.site.siteMetadata.siteUrl}${data.snap.banner.publicURL}`;\n\n  return (\n    <>\n      <html lang=\"en\" />\n      <title>{title}</title>\n      <meta name=\"description\" content={description} />\n      <meta property=\"og:title\" content={data.snap.name} />\n      <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"og:image\" content={image} />\n      <meta name=\"og:image:width\" content=\"1200\" />\n      <meta name=\"og:image:height\" content=\"630\" />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={data.site.siteMetadata.author} />\n      <meta name=\"twitter:title\" content={data.snap.name} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={image} />\n    </>\n  );\n};\n\nexport const query = graphql`\n  query ($id: String) {\n    snap(id: { eq: $id }) {\n      name\n      snapId\n      icon\n      description {\n        description\n        trusted\n      }\n      latestVersion\n      website\n      onboard\n      category\n      author {\n        name\n        website\n      }\n      sourceCode\n      audits {\n        auditor\n        report\n      }\n      banner {\n        publicURL\n      }\n      support {\n        contact\n        faq\n        knowledgeBase\n      }\n    }\n\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        siteUrl\n      }\n    }\n  }\n`;\n\nexport default SnapPage;\n","'use client'\n\n// src/divider.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Divider = forwardRef(function Divider2(props, ref) {\n  const {\n    borderLeftWidth,\n    borderBottomWidth,\n    borderTopWidth,\n    borderRightWidth,\n    borderWidth,\n    borderStyle,\n    borderColor,\n    ...styles\n  } = useStyleConfig(\"Divider\", props);\n  const {\n    className,\n    orientation = \"horizontal\",\n    __css,\n    ...rest\n  } = omitThemingProps(props);\n  const dividerStyles = {\n    vertical: {\n      borderLeftWidth: borderLeftWidth || borderRightWidth || borderWidth || \"1px\",\n      height: \"100%\"\n    },\n    horizontal: {\n      borderBottomWidth: borderBottomWidth || borderTopWidth || borderWidth || \"1px\",\n      width: \"100%\"\n    }\n  };\n  return /* @__PURE__ */ jsx(\n    chakra.hr,\n    {\n      ref,\n      \"aria-orientation\": orientation,\n      ...rest,\n      __css: {\n        ...styles,\n        border: \"0\",\n        borderColor,\n        borderStyle,\n        ...dividerStyles[orientation],\n        ...__css\n      },\n      className: cx(\"chakra-divider\", className)\n    }\n  );\n});\nDivider.displayName = \"Divider\";\n\nexport {\n  Divider\n};\n//# sourceMappingURL=chunk-W7WUSNWJ.mjs.map"],"names":["Head","_ref2","data","title","snap","name","description","image","site","siteMetadata","siteUrl","banner","publicURL","_jsxs","_Fragment","children","_jsx","lang","content","property","author","_ref","snapId","icon","website","onboard","latestVersion","category","installedSnaps","useGetInstalledSnapsQuery","isInstalled","Boolean","Box","position","pointerEvents","top","width","height","sx","background","backgroundSize","filter","opacity","Container","maxWidth","paddingTop","marginTop","NotificationAcknowledger","version","Flex","flexDirection","justifyContent","alignItems","gap","Authorship","InstallSnapButton","SnapWebsiteButton","Divider","marginY","Metadata","Text","color","textTransform","fontWeight","fontSize","Trans","id","values","components","as","Description","whiteSpace","my","RelatedSnaps","props","ref","borderLeftWidth","borderBottomWidth","borderTopWidth","borderRightWidth","borderWidth","borderStyle","borderColor","styles","className","orientation","__css","rest","dividerStyles","vertical","horizontal","jsx","hr","border","cx","displayName"],"sourceRoot":""}