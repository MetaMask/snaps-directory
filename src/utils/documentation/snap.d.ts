// DO NOT EDIT THIS FILE. This file is generated by the Metamask Snaps SDK.

/**
 * Install the Snap with the given ID and (optional) version.
 *
 * @param snapId - The ID of the Snap to install.
 * @param version - The version of the Snap to install. If this is not
 * provided, the latest version will be installed.
 * @returns The Snap interface, i.e., an object with the methods that the
 * Snap exports. See {@link SnapInterface}.
 */
export function installSnap(
  snapId: string,
  version?: string,
): Promise<SnapInterface>;

/**
 * The Snap interface. This is an object with the methods that the Snap
 * exports. The methods are asynchronous, and return a Promise that resolves
 * to the response to the JSON-RPC request.
 *
 * @example
 * const snap = await installSnap('my-snap');
 *
 * // Call the `foo` method, with the object as the request parameters.
 * const response = await snap.foo({ bar: 'baz' });
 */
export type SnapInterface = {
  /**
   * The handler for the `signMessage` method.
   *
   * @param params - The request parameters.
   * @param params.message - The `message` parameter.
   * @param params.path - The `path` parameter.
   * @param params.curve - The `curve` parameter.
   * @returns The signed message in hexadecimal.
   */
  signMessage(params: {
    message: string;
    path: string[];
    curve?: string | undefined;
  }): Promise<string>;

  /**
   * The handler for the `getPublicKey` method.
   *
   * @param params - The request parameters.
   * @param params.path - The `path` parameter.
   * @param params.curve - The `curve` parameter.
   * @param params.compressed - The `compressed` parameter.
   * @returns The public key in hexadecimal.
   */
  getPublicKey(params: {
    path: string[];
    curve?: string | undefined;
    compressed?: boolean | undefined;
  }): Promise<string>;
};
