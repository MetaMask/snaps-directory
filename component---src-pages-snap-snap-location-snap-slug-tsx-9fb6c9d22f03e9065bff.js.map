{"version":3,"file":"component---src-pages-snap-snap-location-snap-slug-tsx-9fb6c9d22f03e9065bff.js","mappings":"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","sources":["webpack://@metamask/snaps-directory/./node_modules/@chakra-ui/layout/dist/chunk-W7WUSNWJ.mjs","webpack://@metamask/snaps-directory/./src/pages/snap/{Snap.location}/{Snap.slug}.tsx"],"sourcesContent":["'use client'\n\n// src/divider.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Divider = forwardRef(function Divider2(props, ref) {\n  const {\n    borderLeftWidth,\n    borderBottomWidth,\n    borderTopWidth,\n    borderRightWidth,\n    borderWidth,\n    borderStyle,\n    borderColor,\n    ...styles\n  } = useStyleConfig(\"Divider\", props);\n  const {\n    className,\n    orientation = \"horizontal\",\n    __css,\n    ...rest\n  } = omitThemingProps(props);\n  const dividerStyles = {\n    vertical: {\n      borderLeftWidth: borderLeftWidth || borderRightWidth || borderWidth || \"1px\",\n      height: \"100%\"\n    },\n    horizontal: {\n      borderBottomWidth: borderBottomWidth || borderTopWidth || borderWidth || \"1px\",\n      width: \"100%\"\n    }\n  };\n  return /* @__PURE__ */ jsx(\n    chakra.hr,\n    {\n      ref,\n      \"aria-orientation\": orientation,\n      ...rest,\n      __css: {\n        ...styles,\n        border: \"0\",\n        borderColor,\n        borderStyle,\n        ...dividerStyles[orientation],\n        ...__css\n      },\n      className: cx(\"chakra-divider\", className)\n    }\n  );\n});\nDivider.displayName = \"Divider\";\n\nexport {\n  Divider\n};\n//# sourceMappingURL=chunk-W7WUSNWJ.mjs.map","import {\n  Box,\n  Button,\n  Container,\n  Divider,\n  Flex,\n  Link,\n  Text,\n} from '@chakra-ui/react';\nimport { t, Trans } from '@lingui/macro';\nimport { graphql } from 'gatsby';\nimport type { FunctionComponent } from 'react';\n\nimport type { RegistrySnapCategory } from '../../../components';\nimport {\n  SnapAuthorship,\n  Icon,\n  SnapData,\n  InstallSnapButton,\n  SnapSourceCode,\n  SnapAudits,\n  SnapCategory,\n  BackButton,\n  SnapDescription,\n} from '../../../components';\nimport { ExternalLink } from '../../../components/ExternalLink';\nimport { getLinkText, type Fields } from '../../../utils';\n\ntype SnapPageProps = {\n  data: {\n    snap: Fields<\n      Queries.Snap,\n      | 'name'\n      | 'icon'\n      | 'snapId'\n      | 'description'\n      | 'latestVersion'\n      | 'website'\n      | 'onboard'\n      | 'category'\n      | 'author'\n      | 'sourceCode'\n      | 'audits'\n      | 'banner'\n      | 'support'\n    >;\n  };\n};\n\nconst SnapPage: FunctionComponent<SnapPageProps> = ({ data }) => {\n  const { name, snapId, icon, website, onboard, description, latestVersion } =\n    data.snap;\n\n  return (\n    <Container\n      maxWidth=\"container.xl\"\n      paddingTop=\"0\"\n      marginTop={{ base: 4, md: 20 }}\n    >\n      <BackButton />\n      <Box p=\"6\" rounded=\"3xl\" boxShadow=\"lg\" background=\"white\">\n        <Flex\n          justifyContent=\"space-between\"\n          flexDirection={{ base: 'column', md: 'row' }}\n          alignItems=\"center\"\n        >\n          <SnapAuthorship name={name} icon={icon} snapId={snapId} />\n          <Flex\n            alignItems=\"center\"\n            flexDirection={{ base: 'column', md: 'row' }}\n            marginTop={{ base: 4, md: 0 }}\n            width={{ base: '100%', md: 'auto' }}\n            gap={{ base: 2, md: 4 }}\n          >\n            {data.snap.website && (\n              <Link\n                href={data.snap.website}\n                isExternal={true}\n                _hover={{ textDecoration: 'none' }}\n                width={{ base: '100%', md: 'auto' }}\n              >\n                <Button\n                  variant={onboard ? 'primary' : 'outline'}\n                  leftIcon={\n                    <Icon\n                      icon={onboard ? 'externalLinkInverted' : 'externalLink'}\n                      width=\"24px\"\n                    />\n                  }\n                  width=\"100%\"\n                  _hover={{ opacity: '75%' }}\n                >\n                  <Trans>Website</Trans>\n                </Button>\n              </Link>\n            )}\n            {!onboard && (\n              <InstallSnapButton\n                snapId={snapId}\n                name={name}\n                icon={icon}\n                website={website}\n                version={latestVersion}\n              />\n            )}\n          </Flex>\n        </Flex>\n        <Divider my=\"6\" />\n        <Flex\n          justifyContent={{ base: 'center', md: 'space-between' }}\n          flexDirection={{ base: 'column', md: 'row' }}\n          flexWrap={{ base: 'nowrap', md: 'wrap', lg: 'nowrap' }}\n          rowGap={{ base: 4, lg: 0 }}\n        >\n          {data.snap.category && (\n            <SnapData\n              label={t`Category`}\n              value={\n                <SnapCategory\n                  category={data.snap.category as RegistrySnapCategory}\n                />\n              }\n            />\n          )}\n          <SnapData label={t`Version`} value={latestVersion} />\n          {data.snap.author && (\n            <SnapData\n              label={t`Developer`}\n              value={\n                <ExternalLink href={data.snap.author.website}>\n                  {data.snap.author.name}\n                </ExternalLink>\n              }\n            />\n          )}\n          {\n            // An empty Box taking full width will divide elements in two rows\n            // only on medium size screens while keeping the full flex\n            // system for every screen.\n          }\n          <Box\n            display={{ base: 'none', md: 'flex', lg: 'none' }}\n            flexBasis=\"100%\"\n            height={0}\n          />\n          {data.snap.sourceCode && (\n            <SnapData\n              label={t`Source Code`}\n              value={<SnapSourceCode url={data.snap.sourceCode} />}\n            />\n          )}\n          {data.snap.audits && (\n            <SnapData\n              label={t`Audit`}\n              value={\n                <SnapAudits\n                  audits={\n                    data.snap.audits as Fields<\n                      Queries.SnapAudits,\n                      'auditor' | 'report'\n                    >[]\n                  }\n                />\n              }\n            />\n          )}\n          {(data.snap.support?.contact ||\n            data.snap.support?.faq ||\n            data.snap.support?.knowledgeBase) && (\n            <SnapData\n              label={t`Support`}\n              value={\n                <>\n                  {data.snap.support.contact && (\n                    <ExternalLink href={data.snap.support.contact}>\n                      {getLinkText(data.snap.support.contact, t`Contact`)}\n                    </ExternalLink>\n                  )}\n                  {data.snap.support.faq && (\n                    <ExternalLink href={data.snap.support.faq}>\n                      <Trans>FAQ</Trans>\n                    </ExternalLink>\n                  )}\n                  {data.snap.support.knowledgeBase && (\n                    <ExternalLink href={data.snap.support.knowledgeBase}>\n                      <Trans>Knowledge Base</Trans>\n                    </ExternalLink>\n                  )}\n                </>\n              }\n            />\n          )}\n        </Flex>\n        <Divider my=\"6\" />\n        <Text\n          color=\"gray.muted\"\n          textTransform=\"uppercase\"\n          fontWeight=\"medium\"\n          fontSize=\"sm\"\n        >\n          <Trans>\n            Description by{' '}\n            <Text\n              as=\"span\"\n              color=\"black\"\n              textTransform=\"uppercase\"\n              fontWeight=\"medium\"\n              fontSize=\"sm\"\n            >\n              {name}\n            </Text>\n          </Trans>\n        </Text>\n        <SnapDescription\n          description={description}\n          mt=\"1\"\n          whiteSpace=\"pre-wrap\"\n        />\n      </Box>\n    </Container>\n  );\n};\n\ntype HeadProps = SnapPageProps & {\n  data: {\n    site: {\n      siteMetadata: Fields<\n        Queries.SiteSiteMetadata,\n        'title' | 'description' | 'author' | 'siteUrl'\n      >;\n    };\n  };\n};\n\nexport const Head: FunctionComponent<HeadProps> = ({ data }) => {\n  const title = `${data.snap.name} - ${data.site.siteMetadata.title}`;\n  const description = `Discover and install ${data.snap.name} on the MetaMask Snaps Directory to enhance your web3 experience. Easily find and install useful Snaps to customize your MetaMask wallet.`;\n  const image = `${data.site.siteMetadata.siteUrl}${data.snap.banner.publicURL}`;\n\n  return (\n    <>\n      <html lang=\"en\" />\n      <title>{title}</title>\n      <meta name=\"description\" content={description} />\n      <meta property=\"og:title\" content={data.snap.name} />\n      <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"og:image\" content={image} />\n      <meta name=\"og:image:width\" content=\"1200\" />\n      <meta name=\"og:image:height\" content=\"630\" />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={data.site.siteMetadata.author} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={image} />\n    </>\n  );\n};\n\nexport const query = graphql`\n  query ($id: String) {\n    snap(id: { eq: $id }) {\n      name\n      snapId\n      icon\n      description {\n        description\n        trusted\n      }\n      latestVersion\n      website\n      onboard\n      category\n      author {\n        name\n        website\n      }\n      sourceCode\n      audits {\n        auditor\n        report\n      }\n      banner {\n        publicURL\n      }\n      support {\n        contact\n        faq\n        knowledgeBase\n      }\n    }\n\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        siteUrl\n      }\n    }\n  }\n`;\n\nexport default SnapPage;\n"],"names":["Divider","props","ref","borderLeftWidth","borderBottomWidth","borderTopWidth","borderRightWidth","borderWidth","borderStyle","borderColor","styles","className","orientation","__css","rest","dividerStyles","vertical","height","horizontal","width","jsx","hr","border","cx","displayName","Head","_ref2","data","title","snap","name","site","siteMetadata","description","image","siteUrl","banner","publicURL","_jsxs","_Fragment","children","_jsx","lang","content","property","author","_ref","_data$snap$support","_data$snap$support2","_data$snap$support3","snapId","icon","website","onboard","latestVersion","Container","maxWidth","paddingTop","marginTop","base","md","BackButton","Box","p","rounded","boxShadow","background","Flex","justifyContent","flexDirection","alignItems","SnapAuthorship","gap","Link","href","isExternal","_hover","textDecoration","Button","variant","leftIcon","Icon","opacity","Trans","id","InstallSnapButton","version","my","flexWrap","lg","rowGap","category","SnapData","label","i18n","_","value","SnapCategory","ExternalLink","display","flexBasis","sourceCode","SnapSourceCode","url","audits","SnapAudits","support","contact","faq","knowledgeBase","getLinkText","Text","color","textTransform","fontWeight","fontSize","values","components","as","SnapDescription","mt","whiteSpace"],"sourceRoot":""}