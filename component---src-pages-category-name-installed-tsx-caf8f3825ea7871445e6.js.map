{"version":3,"file":"component---src-pages-category-name-installed-tsx-caf8f3825ea7871445e6.js","mappings":"+PA4BA,MA6BaA,EAAqCC,IAAc,IAAb,KAAEC,GAAMD,EACzD,MAAME,GAAOC,EAAAA,EAAAA,MAEPC,EAAWH,EAAKG,SAASC,MACzB,KAAEA,GAASC,EAAAA,GAAqBF,GAChCG,EAAQ,GAAGN,EAAKO,KAAKC,aAAaC,QAAUT,EAAKG,SAASO,gBAAgBC,UAE1EC,EAAWX,EAAKY,EAAET,GAClBU,EAAKb,EAAAY,EAAG,CAAAE,GAAA,SAAAC,OAAA,CAAAJ,SAAcA,KACtBK,EAAOhB,EAAAY,EAAG,CAAAE,GAAA,SAAAC,OAAA,CAAAJ,SAAcA,KACxBM,EAAajB,EAAAY,EAAG,CAAAE,GAAA,SAAAC,OAAA,CAAAJ,SAA0BA,KAEhD,OACEO,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,QAAMC,KAAK,QACXD,EAAAA,EAAAA,KAAA,SAAAD,SAAQP,KACRQ,EAAAA,EAAAA,KAAA,QAAMlB,KAAK,cAAcoB,QAASN,KAClCI,EAAAA,EAAAA,KAAA,QAAMG,SAAS,WAAWD,QAASP,KACnCK,EAAAA,EAAAA,KAAA,QAAMG,SAAS,eAAeD,QAASxB,EAAKO,KAAKC,aAAaM,SAC9DQ,EAAAA,EAAAA,KAAA,QAAMG,SAAS,iBAAiBD,QAASN,KACzCI,EAAAA,EAAAA,KAAA,QAAMG,SAAS,UAAUD,QAAQ,aACjCF,EAAAA,EAAAA,KAAA,QAAMlB,KAAK,WAAWoB,QAASlB,KAC/BgB,EAAAA,EAAAA,KAAA,QAAMlB,KAAK,iBAAiBoB,QAAQ,UACpCF,EAAAA,EAAAA,KAAA,QAAMlB,KAAK,kBAAkBoB,QAAQ,SACrCF,EAAAA,EAAAA,KAAA,QAAMlB,KAAK,eAAeoB,QAAQ,yBAClCF,EAAAA,EAAAA,KAAA,QAAMlB,KAAK,kBAAkBoB,QAASxB,EAAKO,KAAKC,aAAakB,UAC7DJ,EAAAA,EAAAA,KAAA,QAAMlB,KAAK,gBAAgBoB,QAASP,KACpCK,EAAAA,EAAAA,KAAA,QAAMlB,KAAK,sBAAsBoB,QAASN,KAC1CI,EAAAA,EAAAA,KAAA,QAAMlB,KAAK,gBAAgBoB,QAASlB,MACnC,EAwBP,UAlFqEqB,IAE/D,IAFgE,KACpE3B,GACD2B,EACC,MAAMC,GAAWC,EAAAA,EAAAA,MAYjB,OAVAC,EAAAA,EAAAA,YAAU,KACRF,GAASG,EAAAA,EAAAA,OACTH,GAASI,EAAAA,EAAAA,IAAYhC,EAAKG,SAASC,QAKnC6B,EAAAA,EAAAA,UAAS,WAAY,CAAEC,SAAS,GAAO,GACtC,CAAClC,EAAKG,SAASC,KAAMwB,IAEjB,IAAI,C","sources":["webpack://@metamask/snaps-directory/./src/pages/{Category.name}/installed.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport { useLingui } from '@lingui/react';\nimport { graphql, navigate } from 'gatsby';\nimport type { FunctionComponent } from 'react';\nimport { useEffect } from 'react';\n\nimport type { RegistrySnapCategory } from '../../constants';\nimport { SNAP_CATEGORY_LABELS } from '../../constants';\nimport { setCategory, toggleInstalled } from '../../features';\nimport { useDispatch } from '../../hooks';\nimport type { Fields } from '../../utils';\n\nexport type CategoryInstalledProps = {\n  data: {\n    category: Fields<Queries.Category, 'name' | 'installedBanner'>;\n  };\n};\n\n/**\n * This page is used to redirect to the main page, while setting the category\n * filter to the current category, and only showing installed snaps.\n *\n * This page is reachable at `/{category}/installed`.\n *\n * @param props - The component props.\n * @param props.data - The page data.\n * @returns The rendered component.\n */\nconst CategoryInstalled: FunctionComponent<CategoryInstalledProps> = ({\n  data,\n}) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(toggleInstalled());\n    dispatch(setCategory(data.category.name as RegistrySnapCategory));\n\n    // According to the type definition, `navigate` returns a promise, but in\n    // practice it does not.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    navigate('/explore', { replace: true });\n  }, [data.category.name, dispatch]);\n\n  return null;\n};\n\ntype HeadProps = CategoryInstalledProps & {\n  data: {\n    site: {\n      siteMetadata: Fields<\n        Queries.SiteSiteMetadata,\n        'title' | 'description' | 'author' | 'siteUrl'\n      >;\n    };\n  };\n};\n\nexport const Head: FunctionComponent<HeadProps> = ({ data }) => {\n  const i18n = useLingui();\n\n  const category = data.category.name as RegistrySnapCategory;\n  const { name } = SNAP_CATEGORY_LABELS[category];\n  const image = `${data.site.siteMetadata.siteUrl}${data.category.installedBanner.publicURL}`;\n\n  const nameText = i18n._(name);\n  const title = t`Installed ${nameText} Snaps on the MetaMask Snaps Directory`;\n  const ogTitle = t`Installed ${nameText} Snaps`;\n  const ogDescription = t`Browse your installed ${nameText} Snaps on the MetaMask Snaps Directory`;\n\n  return (\n    <>\n      <html lang=\"en\" />\n      <title>{title}</title>\n      <meta name=\"description\" content={ogDescription} />\n      <meta property=\"og:title\" content={ogTitle} />\n      <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n      <meta property=\"og:description\" content={ogDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"og:image\" content={image} />\n      <meta name=\"og:image:width\" content=\"1200\" />\n      <meta name=\"og:image:height\" content=\"630\" />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={data.site.siteMetadata.author} />\n      <meta name=\"twitter:title\" content={ogTitle} />\n      <meta name=\"twitter:description\" content={ogDescription} />\n      <meta name=\"twitter:image\" content={image} />\n    </>\n  );\n};\n\nexport const query = graphql`\n  query ($id: String) {\n    category(id: { eq: $id }) {\n      name\n      installedBanner {\n        publicURL\n      }\n    }\n\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        siteUrl\n      }\n    }\n  }\n`;\n\nexport default CategoryInstalled;\n"],"names":["Head","_ref2","data","i18n","useLingui","category","name","SNAP_CATEGORY_LABELS","image","site","siteMetadata","siteUrl","installedBanner","publicURL","nameText","_","title","id","values","ogTitle","ogDescription","_jsxs","_Fragment","children","_jsx","lang","content","property","author","_ref","dispatch","useDispatch","useEffect","toggleInstalled","setCategory","navigate","replace"],"sourceRoot":""}